<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on CyBlog</title>
    <link>http://localhost:1313/tags/tools/</link>
    <description>Recent content in Tools on CyBlog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2024 21:10:41 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pixie Lite PS: A Lightweight PowerShell AbuseIPDB Bulk Address Check Script</title>
      <link>http://localhost:1313/posts/pixie-powershell/</link>
      <pubDate>Wed, 20 Nov 2024 21:10:41 +0800</pubDate>
      <guid>http://localhost:1313/posts/pixie-powershell/</guid>
      <description>&lt;p&gt;When I was working as an L1 SOC Analyst at an Australian Managed Service Provider (MSP), one of the challenges I encountered was manually researching large volumes of IP addresses to gather their geographic location and ISP details. This was necessary to identify IP addresses to which internal hosts were connecting that were not part of the validated list. For this reason, I decided to practice my Python script to automate this task. Originally, I leveraged IPInfo&amp;rsquo;s API capability to automatically pull the IP geolocation, company, and hostname informaition of bulk IP addresses, which simply displays the parsed data to the CLI using the &lt;code&gt;IP_ADDRESS[COUNTRY:COMPANY:HOSTNAME]&lt;/code&gt; format. Overtime, the need to also include IP address reputation in a readable format arose. The Pixie Lite for Abuse IP DB was then born, which accepts a &lt;code&gt;.txt&lt;/code&gt; file, communicates using Abuse IP DB API to capture the county code, ISP, abuse confidence score, total reports, and last report of each IP address, then exports the parsed data into a &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
